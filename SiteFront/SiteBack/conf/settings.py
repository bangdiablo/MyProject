"""
Django settings for usersite project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

from corsheaders.defaults import default_headers
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'khej+zz(e$jac@!p!ctp1ehzyhrlpc@yw1vh0s4ko9apd@$88^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'dbox-dev.net', 'reseller.dbox-dev.net']

CORS_ALLOW_HEADERS = default_headers + (
    'X-BOX-ACCESSTOKEN',
    'X-BOX-ACCESSKEY',
)

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'conf',
    'user',
    'reseller',
    # 'user.management'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (  # Session 인증 실패하면 Token 인증
        # 'common.login_check.login_check'
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        'common.MyTokenAuthentication.MyTokenAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    # 'rest_framework.authentication.SessionAuthentication',
    # 'rest_framework.authentication.BasicAuthentication',
    # ),
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # http 접근제어 규약 해제
    'django.middleware.common.CommonMiddleware',  # http 접근제어 규약 해제

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'middleware.middleware.AuthMiddleware',
]

ROOT_URLCONF = 'conf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['user/email_template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'conf.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    # 쓰기 전용
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': './db.cnf',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
        'NAME': 'dbbox',  # DB명
        'USER': 'legal',  # 데이터베이스 계정
        'PASSWORD': 'wise0699',  # 계정 비밀번호
        'HOST': 'test-dbbox-aurora.cluster-cseekqks7k0p.ap-northeast-2.rds.amazonaws.com',
        # 데이테베이스 주소(IP)
        # 'HOST': 'localhost',  # 데이테베이스 주소(IP)
        'PORT': '3306',  # 데이터베이스 포트(보통은 3306)
    },
    # 읽기 전용
    'replica': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': './db.cnf',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
        'NAME': 'dbbox',  # DB명
        'USER': 'legal',  # 데이터베이스 계정
        'PASSWORD': 'wise0699',  # 계정 비밀번호
        'HOST': 'test-dbbox-aurora.cluster-ro-cseekqks7k0p.ap-northeast-2.rds.amazonaws.com',
        # 데이테베이스 주소(IP)
        # 'HOST': 'localhost',  # 데이테베이스 주소(IP)
        'PORT': '3306',  # 데이터베이스 포트(보통은 3306)
    }
}

DATABASE_ROUTERS = ['user.connected_device.router.ConnectedDeviceRouter', 'user.main.router.MainRouter']

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

IS_REAL = False

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGES = [
    ('ko', _('Korean')),
    ('ja', _('Japanese')),
    ('en', _('English')),
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    os.path.join(STATIC_ROOT, 'images'),
    os.path.join(STATIC_ROOT, 'temp'),
    os.path.join(STATIC_ROOT, 'uploads'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'static', 'media')

DISCONNECT_TIME = 20

# Email
# TODO : 해당 user, password는 localhost에서는 유효하지만 test server에서 이메일 발송이 안 됨. 해당 API 이용 url 등록을 해야할 듯.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'email-smtp.us-west-2.amazonaws.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = "AKIA4WZI5LKEILPLZUUL"
EMAIL_HOST_PASSWORD = 'BG7gyvEVslxtBzR8GGvQ4Q79C6ujOi2KVzjgU4EYu1By'
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'admin_dkeiyaku@aos.com'
SERVER_EMAIL = 'admin_dkeiyaku@aos.com'

MAIL_TEMPLATE_SERVER_URL = "http://dbox-dev.net"
RESELLER_MAIL_TEMPLATE_SERVER_URL = "http://reseller.dbox-dev.net"


# logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(BASE_DIR, 'logs', 'mysite.log'),
        #     'formatter': 'verbose'
        # },
    },
    'loggers': {
        'mylogger': {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
        # db로그 확인!
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
    },
}

S3_BUCKET_NAME = "storage-service-s3"

S3_REGION_NAME = 'ap-northeast-2'
S3_ACCESS_ID = "AKIASF4FLQWTR6IW3G3W"
S3_ACCESS_KEY = "oHoSEL1QU8tLZE4cgVXTAj7QiZ9P0zWHV3QArYpL"

USER_TEMP_DIR_PATH = os.path.join(BASE_DIR, "/static/temp")
