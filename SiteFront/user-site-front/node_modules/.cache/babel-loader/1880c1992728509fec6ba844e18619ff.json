{"remainingRequest":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/babel-loader/lib/index.js!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/views/before_login/FindPassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/views/before_login/FindPassword.vue","mtime":1577937713121},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGJlZm9yZV9sb2dpbl9oZWFkZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9oZWFkZXIvYmVmb3JlX2xvZ2luX2hlYWRlcic7CmltcG9ydCBiZWZvcmVfbG9naW5fZm9vdGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9vdGVyL2JlZm9yZV9sb2dpbl9mb290ZXInOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVtYWlsOiAnJywKICAgICAgdmFsaWQ6IHsKICAgICAgICBlbWFpbDogewogICAgICAgICAgJ2hhcy12YWx1ZSc6IGZhbHNlLAogICAgICAgICAgJ2hhcy1lcnJvcic6IGZhbHNlCiAgICAgICAgfQogICAgICB9LAogICAgICBpbnZhbGlkRW1haWw6IGZhbHNlCiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICB2YWxpZEVtYWlsKCkgewogICAgICByZXR1cm4gdGhpcy52YWxpZC5lbWFpbFsnaGFzLXZhbHVlJ10gJiYgIXRoaXMudmFsaWQuZW1haWxbJ2hhcy1lcnJvciddOwogICAgfQoKICB9LAogIGNvbXBvbmVudHM6IHsKICAgICdiZWZvcmUtbG9naW4taGVhZGVyJzogYmVmb3JlX2xvZ2luX2hlYWRlciwKICAgICdiZWZvcmUtbG9naW4tZm9vdGVyJzogYmVmb3JlX2xvZ2luX2Zvb3RlcgogIH0sCiAgbWV0aG9kczogewogICAgLy8gYXR0ZW1wdCB0byBmaW5kIGVtYWlsCiAgICBzZW5kRW1haWwoKSB7CiAgICAgIHRoaXMuY2hlY2tFbWFpbCgpOwogICAgICBjb25zb2xlLmxvZyh0aGlzLnZhbGlkRW1haWwpOwoKICAgICAgaWYgKHRoaXMudmFsaWRFbWFpbCkgewogICAgICAgIC8vIOyeheugpe2VnCDrqZTsnbwg7KO87IaM66W8IOqwgOyngOuKlCDqs4TsoJXsnbQg7J6I64qU7KeAIO2ZleyduAogICAgICAgIGxldCBxcyA9IHJlcXVpcmUoJ3FzJyk7CgogICAgICAgIGF4aW9zLnBvc3QoJy9tYWluL2ZpbmRfcGFzc3dvcmQvJywgcXMuc3RyaW5naWZ5KHsKICAgICAgICAgICdlbWFpbCc6IHRoaXMuZW1haWwsCiAgICAgICAgICAnbGFuZ1R5cGUnOiB0aGlzLiRzdG9yZS5zdGF0ZS5tYWluLmxhbmdUeXBlCiAgICAgICAgfSkpLnRoZW4ocmVzdWx0ID0+IHsKICAgICAgICAgIGxldCBkYXRhID0gcmVzdWx0LmRhdGE7CgogICAgICAgICAgaWYgKGRhdGEuY29kZSA9PSAxMDAwKSB7CiAgICAgICAgICAgIGFsZXJ0KHRoaXMuJHQoJ2NvbW1vbi5jb21tZW50LmNoZWNrWW91ckVtYWlsJykpOwogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL2JlZm9yZV9sb2dpbi9sb2dpbicpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5pbnZhbGlkRW1haWwgPSB0cnVlOyAvLyDruYTtmZzshLHtmZQg7Jyg7KCAICgtMjAwMikKCiAgICAgICAgICAgIGlmIChkYXRhLmNvZGUgPT0gLTIwMDIpIHsKICAgICAgICAgICAgICB0aGlzLiRyZWZzLmNvbW1lbnRUb0VtYWlsLmlubmVySFRNTCA9IHRoaXMuJHQoJ2NvbW1vbi5jb21tZW50LmZhaWxUb0xvZ2luX2luYWN0aXZlJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy4kcmVmcy5jb21tZW50VG9FbWFpbC5pbm5lckhUTUwgPSB0aGlzLiR0KCdjb21tb24uY29tbWVudC5ub0V4aXN0RW1haWwnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgICAgIH0pLmNhdGNoKCk7CiAgICAgIH0KICAgIH0sCgogICAgLy8gY2hlY2sgZW1haWwgYWRyZXNzCiAgICBjaGVja0VtYWlsKCkgewogICAgICBsZXQgY29tbWVudCA9ICIiOyAvLyBlbWFpbOydtCDruYTslrTsnojripTsp4Ag7ZmV7J24CgogICAgICBpZiAodGhpcy5lbWFpbCA9PSAiIikgewogICAgICAgIGNvbW1lbnQgPSB0aGlzLiR0KCdjb21tb24uY29tbWVudC5lc3NlbnRpYWwnKTsKICAgICAgICB0aGlzLnZhbGlkLmVtYWlsWyJoYXMtZXJyb3IiXSA9IHRydWU7CiAgICAgICAgdGhpcy5pbnZhbGlkRW1haWwgPSB0cnVlOyAvLyBlbWFpbOydtCDsnKDtmqjtlZzsp4Ag7ZmV7J24CiAgICAgIH0gZWxzZSBpZiAoIWNoZWNrRW1haWwodGhpcy5lbWFpbCkpIHsKICAgICAgICBjb21tZW50ID0gdGhpcy4kdCgnY29tbW9uLmNvbW1lbnQuaW52YWxpZEVtYWlsJyk7CiAgICAgICAgdGhpcy52YWxpZC5lbWFpbFsiaGFzLWVycm9yIl0gPSB0cnVlOwogICAgICAgIHRoaXMuaW52YWxpZEVtYWlsID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnZhbGlkLmVtYWlsWyJoYXMtZXJyb3IiXSA9IGZhbHNlOwogICAgICAgIHRoaXMuaW52YWxpZEVtYWlsID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIHRoaXMudmFsaWQuZW1haWxbImhhcy12YWx1ZSJdID0gdHJ1ZTsKCiAgICAgIGlmICh0aGlzLmludmFsaWRFbWFpbCA9PSB0cnVlKSB7CiAgICAgICAgdGhpcy4kcmVmcy5jb21tZW50VG9FbWFpbC5pbm5lckhUTUwgPSAiIjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMudmFsaWQuZW1haWxbImhhcy1lcnJvciJdKSB7CiAgICAgICAgdGhpcy4kcmVmcy5jb21tZW50VG9FbWFpbC5pbm5lckhUTUwgPSBjb21tZW50OwogICAgICB9CiAgICB9CgogIH0KfTsKCmZ1bmN0aW9uIGNoZWNrRW1haWwoZW1haWwpIHsKICBsZXQgcmVnZXggPSAvKFtcdy0uXSspQCgoXFtbMC05XXsxLDN9XC5bMC05XXsxLDN9XC5bMC05XXsxLDN9XC4pfCgoW1x3LV0rXC4pKykpKFthLXpBLVpdezIsNH18WzAtOV17MSwzfSkoXF0/KSQvOwogIHJldHVybiBlbWFpbCAhPSAnJyAmJiBlbWFpbCAhPSAndW5kZWZpbmVkJyAmJiByZWdleC50ZXN0KGVtYWlsKTsKfQ=="},{"version":3,"sources":["FindPassword.vue"],"names":[],"mappings":"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","sourcesContent":["<!--    메인 표시되는 화면은 폴더명 == 파일명으로 사용바랍니다.            -->\n<template>\n    <div id=\"member_container\">\n        <section id=\"member_info\">\n            <before-login-header/>\n            <div class=\"member_form\">\n                <h2>{{$t('find_password.title')}}</h2>\n                <div class=\"visual\">\n                    <img src=\"@/assets/images/member/visual_login.png\" alt=\"\"/>\n                </div>\n                <p class=\"ask_msg\">\n                    {{ $t('find_password.subTitle1') }}<br />\n                    {{ $t('find_password.subTitle2') }}\n                </p>\n\n                <fieldset>\n                    <legend>이메일 입력</legend>\n                    <p class=\"field\">\n                        <label for=\"findEmail\">{{ $t('find_password.text_email') }}</label>\n                        <input type=\"text\" :placeholder=\"$t('find_password.text_email')\" v-model=\"email\" id=\"findEmail\" :class=\"{'has-value':valid.email['has-value'], 'has-error':valid.email['has-error']}\" @keyup.enter=\"sendEmail\"/>\n                        <span class=\"input-image green\" v-if=\"validEmail\">{{ $t('common.comment.valid') }}</span>\n                    </p>\n                    <p class=\"error_msg red\" v-show=\"invalidEmail\" ref=\"commentToEmail\">유효한 메일 주소를 입력하세요.</p>\n                    <p class=\"btn_set\">\n                        <button type=\"button\" @click=\"sendEmail\" ref=\"btnSend\">{{$t('find_password.button_send')}}</button>\n                    </p>\n                </fieldset>\n            </div>\n            <before-login-footer/>\n        </section>\n    </div>\n</template>\n\n<script>\n\n    import before_login_header from '../../components/header/before_login_header'\n    import before_login_footer from '../../components/footer/before_login_footer'\n\n    export default {\n        data() {\n            return {\n                email: '',\n                valid : {\n                    email: {\n                        'has-value': false,\n                        'has-error': false\n                    }\n                },\n                invalidEmail : false\n            }\n        },\n        computed: {\n            validEmail () {\n\n                return this.valid.email['has-value'] && !this.valid.email['has-error'];\n            }\n        },\n        components: {\n            'before-login-header': before_login_header,\n            'before-login-footer': before_login_footer,\n        },\n        methods: {\n\n            // attempt to find email\n            sendEmail() {\n\n                this.checkEmail();\n                console.log(this.validEmail)\n\n                if (this.validEmail) {\n                    \n                    // 입력한 메일 주소를 가지는 계정이 있는지 확인\n                    let qs = require('qs');\n                    axios.post('/main/find_password/',\n                        qs.stringify({\n\n                            'email': this.email,\n                            'langType': this.$store.state.main.langType\n\n                        })).then(result => {\n\n                            let data = result.data;\n\n                            if (data.code == 1000) {\n\n                                alert(this.$t('common.comment.checkYourEmail'));\n                                this.$router.push('/before_login/login');\n\n                            } else {\n\n                                this.invalidEmail = true;\n\n                                // 비활성화 유저 (-2002)\n                                if (data.code == -2002) {\n\n                                    this.$refs.commentToEmail.innerHTML = this.$t('common.comment.failToLogin_inactive');\n\n                                } else {\n\n                                    this.$refs.commentToEmail.innerHTML = this.$t('common.comment.noExistEmail');\n                                }\n\n                            }\n\n                            console.log(data);\n\n                        }).catch();\n                }\n            },\n\n            // check email adress\n            checkEmail() {\n\n                let comment = \"\";\n\n                // email이 비어있는지 확인\n                if (this.email == \"\") {\n\n                    comment = this.$t('common.comment.essential');\n                    this.valid.email[\"has-error\"] = true;\n                    this.invalidEmail = true;\n\n                // email이 유효한지 확인\n                } else if (!checkEmail(this.email)) {\n\n                    comment = this.$t('common.comment.invalidEmail');\n                    this.valid.email[\"has-error\"] = true;\n                    this.invalidEmail = true;\n\n                } else {\n\n                    this.valid.email[\"has-error\"] = false;\n                    this.invalidEmail = false;\n                }\n\n                this.valid.email[\"has-value\"] = true;\n\n                if (this.invalidEmail == true) {\n\n                    this.$refs.commentToEmail.innerHTML = \"\";\n                }\n\n                if (this.valid.email[\"has-error\"]) {\n\n                    this.$refs.commentToEmail.innerHTML = comment;\n                }\n            }\n        }\n    }\n\n    function checkEmail(email) {\n\n        let regex=/([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n\n        return (email != '' && email != 'undefined' && regex.test(email));\n    }\n</script>\n<style>\n</style>\n"],"sourceRoot":"src/views/before_login"}]}