{"remainingRequest":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/babel-loader/lib/index.js!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/store/storage_service/vuex_storage_service.js","dependencies":[{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/store/storage_service/vuex_storage_service.js","mtime":1581294959518},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIHN0b3JhZ2Vfc2VydmljZToge30sCiAgICBsaXN0czogW10KICB9LAogIG11dGF0aW9uczogewogICAgc2V0X3N0b3JhZ2Vfc2VydmljZV9nb29nbGVfZHJpdmVfdG9fdHJ1ZShzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5zdG9yYWdlX3NlcnZpY2UgPSBkYXRhOwogICAgfSwKCiAgICBzZXRfZGF0YShzdGF0ZSwgZGF0YSkgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgIGRhdGEubGlzdFtpXVsnaWNvSW1nVXJsJ10gPSAnJywgZGF0YS5saXN0W2ldWydjaGVja2VkJ10gPSBmYWxzZSwgZGF0YS5saXN0W2ldWydvbiddID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIHN0YXRlLmxpc3RzID0gZGF0YTsKICAgIH0KCiAgfSwKICBhY3Rpb25zOiB7CiAgICBnZXRGb2xkZXJMaXN0OiAoewogICAgICBjb21taXQKICAgIH0sIGRhdGEpID0+IHsKICAgICAgdmFyIHFzID0gcmVxdWlyZSgncXMnKTsKCiAgICAgIGF4aW9zLnBvc3QoJy9zdG9yYWdlX3NlcnZpY2UvZ2V0Rm9sZGVyTGlzdC8nLCBxcy5zdHJpbmdpZnkoewogICAgICAgIGlkOiBkYXRhLml0ZW0uZmlfaWQKICAgICAgfSkpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIGNvbW1pdCgnc2V0X2RhdGEnLCByZXNwb25zZS5kYXRhLmRhdGEpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRHb29nbGVEcml2ZTogKHsKICAgICAgY29tbWl0CiAgICB9KSA9PiB7CiAgICAgIGF4aW9zLmdldCgnL3N0b3JhZ2Vfc2VydmljZS9nb29nbGVfZHJpdmUvJykudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgY29tbWl0KCdzZXRfZGF0YScsIHJlc3BvbnNlLmRhdGEuZGF0YSk7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/store/storage_service/vuex_storage_service.js"],"names":["namespaced","state","storage_service","lists","mutations","set_storage_service_google_drive_to_true","data","set_data","i","list","length","actions","getFolderList","commit","qs","require","axios","post","stringify","id","item","fi_id","then","response","getGoogleDrive","get"],"mappings":"AAAA,eAAe;AACbA,EAAAA,UAAU,EAAE,IADC;AAEbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAE,EADZ;AAELC,IAAAA,KAAK,EAAE;AAFF,GAFM;AAMbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,wCAAwC,CAACJ,KAAD,EAAQK,IAAR,EAAc;AACpDL,MAAAA,KAAK,CAACC,eAAN,GAAwBI,IAAxB;AACD,KAHQ;;AAITC,IAAAA,QAAQ,CAACN,KAAD,EAAQK,IAAR,EAAc;AACpB,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,IAAL,CAAUC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACzCF,QAAAA,IAAI,CAACG,IAAL,CAAUD,CAAV,EAAa,WAAb,IAA4B,EAA5B,EACAF,IAAI,CAACG,IAAL,CAAUD,CAAV,EAAa,SAAb,IAA0B,KAD1B,EAEAF,IAAI,CAACG,IAAL,CAAUD,CAAV,EAAa,IAAb,IAAqB,KAFrB;AAGD;;AACDP,MAAAA,KAAK,CAACE,KAAN,GAAcG,IAAd;AACD;;AAXQ,GANE;AAmBbK,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAE,CAAC;AAACC,MAAAA;AAAD,KAAD,EAAWP,IAAX,KAAoB;AACjC,UAAIQ,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACAC,MAAAA,KAAK,CAACC,IAAN,CAAW,iCAAX,EACEH,EAAE,CAACI,SAAH,CAAa;AACXC,QAAAA,EAAE,EAAEb,IAAI,CAACc,IAAL,CAAUC;AADH,OAAb,CADF,EAIEC,IAJF,CAIOC,QAAQ,IAAI;AACjBV,QAAAA,MAAM,CAAC,UAAD,EAAaU,QAAQ,CAACjB,IAAT,CAAcA,IAA3B,CAAN;AACD,OAND;AAOD,KAVM;AAWPkB,IAAAA,cAAc,EAAC,CAAC;AAACX,MAAAA;AAAD,KAAD,KAAa;AAC1BG,MAAAA,KAAK,CAACS,GAAN,CAAU,gCAAV,EAA4CH,IAA5C,CAAiDC,QAAQ,IAAI;AAC3DV,QAAAA,MAAM,CAAC,UAAD,EAAaU,QAAQ,CAACjB,IAAT,CAAcA,IAA3B,CAAN;AACD,OAFD;AAGD;AAfM;AAnBI,CAAf","sourcesContent":["export default {\n  namespaced: true,\n  state: {\n    storage_service: {},\n    lists: [],\n  },\n  mutations: {\n    set_storage_service_google_drive_to_true(state, data) {\n      state.storage_service = data\n    },\n    set_data(state, data) {\n      for (let i = 0; i < data.list.length; i++) {\n        data.list[i]['icoImgUrl'] = '',\n        data.list[i]['checked'] = false,\n        data.list[i]['on'] = false\n      }\n      state.lists = data\n    }\n  },\n  actions: {\n    getFolderList: ({commit}, data) => {\n      var qs = require('qs');\n      axios.post('/storage_service/getFolderList/',\n        qs.stringify({\n          id: data.item.fi_id\n        })\n      ).then(response => {\n        commit('set_data', response.data.data);\n      })\n    },\n    getGoogleDrive:({commit}) =>{\n      axios.get('/storage_service/google_drive/').then(response => {\n        commit('set_data', response.data.data);\n      });\n    }\n  }\n}\n"]}]}