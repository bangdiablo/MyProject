{"remainingRequest":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/views/management/policy/policy_cold_storage.vue?vue&type=template&id=68ddf15c&scoped=true&","dependencies":[{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/src/views/management/policy/policy_cold_storage.vue","mtime":1584337020822},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jaehyukbang/db_project_2019/SITE/SiteFront/user-site-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}